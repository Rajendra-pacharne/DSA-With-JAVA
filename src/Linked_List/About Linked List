In Java, a linked list is a linear data structure that consists of a sequence of elements called nodes. Each node contains a value and a reference to the next node in the list. The last node in the list typically has a reference to null, indicating the end of the list.

The basic idea behind a linked list is that each node stores the data and a reference to the next node, forming a chain-like structure. Unlike an array, where elements are stored in contiguous memory locations, a linked list allows for dynamic memory allocation as nodes can be scattered throughout the memory.

In Java, you can implement a linked list by creating a Node class and a LinkedList class.

Here's a basic implementation of a singly linked list in Java:

```java
// Node class
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// LinkedList class
class LinkedList {
    Node head;

    public LinkedList() {
        this.head = null;
    }

    // Method to add a new node at the beginning of the list
    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    // Method to display the elements of the linked list
    public void display() {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list.add(3);
        list.add(7);
        list.add(12);

        list.display(); // Output: 12 7 3
    }
}
```

In this example, the `Node` class represents a single node in the linked list. It has a `data` field to store the value and a `next` field to hold the reference to the next node.

The `LinkedList` class represents the linked list itself. It has a `head` field that points to the first node in the list. The `add()` method adds a new node at the beginning of the list by updating the head reference accordingly. The `display()` method traverses the list and prints the data of each node.

In the `main()` method, we create a `LinkedList` object, add some nodes to it using the `add()` method, and then display the contents of the list using the `display()` method.

This is a basic implementation of a singly linked list in Java. Keep in mind that there are other variations of linked lists, such as doubly linked lists or circular linked lists, which have additional features.